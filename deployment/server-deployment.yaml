apiVersion: v1
# 複数のコンテナへのアクセスを仲介してくれるロードバランサー
kind: Service 
metadata: 
  name: gipmail
spec:
  type: NodePort
  selector:
  # deployment.ymlのspec.selector.matchLabels.appと合わせる
    app: gipmail
  ports:
    - port: 8000
  #     nodePort: 30010
  #     protocol: TCP
---
# # PVは外部のボリュームを抽象化するリソースです。
# kind: PersistentVolume
# apiVersion: v1
# metadata:
#   name: postgres-pv
#   labels:
#     type: local
# spec:
#   storageClassName: manual
#   capacity:
#     storage: 2Gi
#   accessModes:
#     - ReadWriteOnce
#   hostPath:
#     path: /server/dev/django_todo/mount
# ---
# # PVCはコンテナが利用するボリューム要件を指定する仕組みです。
# kind: PersistentVolumeClaim
# apiVersion: v1
# metadata:
#   name: postgres-pvc
#   labels:
#     type: local
# spec:
#   storageClassName: manual
#   accessModes:
#     - ReadWriteOnce
#   resources:
#     requests:
#       storage: 2Gi
#   volumeName: postgres-pv
---
# for versions before 1.8.0 use apps/v1beta1
apiVersion: apps/v1 
# 複数のコンテナを並列起動し、世代管理できる仕組み
kind: Deployment 
metadata:
  # kubectl runの後に指定していた名前
  name: gipmail
spec:
  # レプリカ数（コンテナの並列数）
  replicas: 1  
  selector:
    matchLabels:
      # 後述のspec.template.metadata.labels.appと合わせる
      app: gipmail
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        # spec.selector.matchLabels.appと合わせる
        app: gipmail
    spec:
      containers:
      - name: gipmail
        image: 192.168.100.152:5000/gipmail/gipmail:latest
#        imagePullPolicy: IfNotPresent 
        ports: # コンテナの公開しているポート
        - containerPort: 8000
      nodeSelector:
        ms: slave
#          persistentVolumeClaim:
#            claimName: postgres-pvc
